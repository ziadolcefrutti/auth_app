// Mocks generated by Mockito 5.4.5 from annotations
// in auth_app/test/features/auth/presentatoin/widget/soical_buttons_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i10;

import 'package:auth_app/core/common/entities/user.dart' as _i8;
import 'package:auth_app/core/utils/utils.dart' as _i11;
import 'package:auth_app/features/auth/app_logic/auth_provider.dart' as _i7;
import 'package:auth_app/features/auth/domain/usecase/get_current_user_usecase.dart'
    as _i5;
import 'package:auth_app/features/auth/domain/usecase/sign_in_usecase.dart'
    as _i2;
import 'package:auth_app/features/auth/domain/usecase/sign_in_with_google_usecase.dart'
    as _i6;
import 'package:auth_app/features/auth/domain/usecase/sign_out_usecase.dart'
    as _i4;
import 'package:auth_app/features/auth/domain/usecase/sign_up_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSignInUseCase_0 extends _i1.SmartFake implements _i2.SignInUseCase {
  _FakeSignInUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSignUpUseCase_1 extends _i1.SmartFake implements _i3.SignUpUseCase {
  _FakeSignUpUseCase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSignOutUseCase_2 extends _i1.SmartFake
    implements _i4.SignOutUseCase {
  _FakeSignOutUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetCurrentUserUseCase_3 extends _i1.SmartFake
    implements _i5.GetCurrentUserUseCase {
  _FakeGetCurrentUserUseCase_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSignInWithGoogleUseCase_4 extends _i1.SmartFake
    implements _i6.SignInWithGoogleUseCase {
  _FakeSignInWithGoogleUseCase_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthsProvider extends _i1.Mock implements _i7.AuthsProvider {
  MockAuthsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignInUseCase get signInUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#signInUseCase),
            returnValue: _FakeSignInUseCase_0(
              this,
              Invocation.getter(#signInUseCase),
            ),
          )
          as _i2.SignInUseCase);

  @override
  _i3.SignUpUseCase get signUpUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#signUpUseCase),
            returnValue: _FakeSignUpUseCase_1(
              this,
              Invocation.getter(#signUpUseCase),
            ),
          )
          as _i3.SignUpUseCase);

  @override
  _i4.SignOutUseCase get signOutUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#signOutUseCase),
            returnValue: _FakeSignOutUseCase_2(
              this,
              Invocation.getter(#signOutUseCase),
            ),
          )
          as _i4.SignOutUseCase);

  @override
  _i5.GetCurrentUserUseCase get getCurrentUserUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getCurrentUserUseCase),
            returnValue: _FakeGetCurrentUserUseCase_3(
              this,
              Invocation.getter(#getCurrentUserUseCase),
            ),
          )
          as _i5.GetCurrentUserUseCase);

  @override
  _i6.SignInWithGoogleUseCase get signInWithGoogleUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#signInWithGoogleUseCase),
            returnValue: _FakeSignInWithGoogleUseCase_4(
              this,
              Invocation.getter(#signInWithGoogleUseCase),
            ),
          )
          as _i6.SignInWithGoogleUseCase);

  @override
  set user(_i8.UserEntity? _user) => super.noSuchMethod(
    Invocation.setter(#user, _user),
    returnValueForMissingStub: null,
  );

  @override
  set errorMessage(String? _errorMessage) => super.noSuchMethod(
    Invocation.setter(#errorMessage, _errorMessage),
    returnValueForMissingStub: null,
  );

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
    Invocation.setter(#isLoading, _isLoading),
    returnValueForMissingStub: null,
  );

  @override
  bool get isGoogleLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isGoogleLoading),
            returnValue: false,
          )
          as bool);

  @override
  set isGoogleLoading(bool? _isGoogleLoading) => super.noSuchMethod(
    Invocation.setter(#isGoogleLoading, _isGoogleLoading),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i9.Future<void> signIn(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [email, password]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> signUp(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [email, password]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void loadCurrentUser() => super.noSuchMethod(
    Invocation.method(#loadCurrentUser, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Utils].
///
/// See the documentation for Mockito's code generation for more information.
class MockUtils extends _i1.Mock implements _i11.Utils {
  MockUtils() {
    _i1.throwOnMissingStub(this);
  }
}
