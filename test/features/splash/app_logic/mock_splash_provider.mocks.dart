// Mocks generated by Mockito 5.4.5 from annotations
// in auth_app/test/features/splash/app_logic/mock_splash_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:auth_app/features/auth/domain/usecase/get_current_user_usecase.dart'
    as _i2;
import 'package:auth_app/features/splash/app_logic/splash_provider.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCurrentUserUseCase_0 extends _i1.SmartFake
    implements _i2.GetCurrentUserUseCase {
  _FakeGetCurrentUserUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SplashProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplashProvider extends _i1.Mock implements _i3.SplashProvider {
  MockSplashProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCurrentUserUseCase get getCurrentUserUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getCurrentUserUseCase),
            returnValue: _FakeGetCurrentUserUseCase_0(
              this,
              Invocation.getter(#getCurrentUserUseCase),
            ),
          )
          as _i2.GetCurrentUserUseCase);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<bool> checkLoginStatus() =>
      (super.noSuchMethod(
            Invocation.method(#checkLoginStatus, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
